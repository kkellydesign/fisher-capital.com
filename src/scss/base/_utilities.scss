html, body {
  box-sizing: border-box;
}

*, *:before, *:after {
  box-sizing: inherit;
}

img{max-width: 100%;}

.float-right{
	float:right;
	margin: 0 0 20px 20px;
}
.float-left{
	float:left;
	margin: 0 20px 20px 0;
}
.pos-rel{
  position:relative;
}

.text-right {
  text-align: right;
}

.text-center{
  text-align:center;
}
.text-uppercase {
  text-transform: uppercase;
}

.no-margin{
  margin: 0;
}

.light-bg {
  background: $lightest-grey;
}

.green-heads {
  h1, h2, h3, h4, h5, h6 {
    color: $green;
    text-transform: uppercase;
  }
}

.green {
  color: $green;
}

.medium-beige-bg {
  background: $medium-beige;
}

.fancybox, .fancybox:hover {
  border-bottom: none;
}

// breakpoint classes
.mobile-only {
  display:block;
  @include breakpoint($above-stacked){ display: none; }
}

.hide-mobile {
  display:none;
  @include breakpoint($above-stacked){ display: block; }
}

//breakpoint settings
@include breakpoint-set('no query fallbacks', true);

@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

.clearfix{
	@include clearfix();
}

//use rems with fallback, then the font-size mixin for fallbacks
html {
  font-size: 62.5%; /* Sets up the Base 10 stuff */
}
@mixin font-size($sizeValue: 1.6) {
  font-size: ($sizeValue * 10) + px;
  font-size: $sizeValue + rem;
}

.video-wrap{
  position: relative;
  width:100%;
  padding-bottom: 56.25%; /* 16:9 */
  padding-top: 0;
  height: 0;
  margin-bottom:20px;
  iframe, object, embed{
    top:0;
    left:0;
    width:100% !important;
    height:100% !important;
    position: absolute;
  }
}

table{
  width: 100%;
  td, tr{
    vertical-align:top;
  }
}

//facebook junk
.fb-page, .fb-page iframe[style], .fb-page span {
    width: 100% !important;
}

/// Triangle helper mixin
/// @param {Direction} $direction - Triangle direction, either `top`, `right`, `bottom` or `left`
/// @param {Color} $color [currentcolor] - Triangle color
/// @param {Length} $size [1em] - Triangle size
@mixin triangle($direction, $color: currentcolor, $size: 1em) {
  @if not index(top right bottom left, $direction) {
    @error "Direction must be either `top`, `right`, `bottom` or `left`.";
  }

  width: 0;
  height: 0;
  content: '';
  z-index: 2;
  border-#{opposite-position($direction)}: ($size * 1.5) solid $color;

  $perpendicular-borders: $size solid transparent;

  @if $direction == top or $direction == bottom {
    border-left:   $perpendicular-borders;
    border-right:  $perpendicular-borders;
  } @else if $direction == right or $direction == left {
    border-bottom: $perpendicular-borders;
    border-top:    $perpendicular-borders;
  }
}

.fancybox-caption-wrap {
  text-align: center;
  font-weight: bold;
}
figure {
  padding: 0;
  margin: 0;
}


hr {
  border: 0 none;
  border-bottom: 1px solid rgba(255,255,255,0.8);
  border-top: 1px solid rgba(0,0,0,0.15);
  margin: 1em 0;
  clear:both;
  @include clearfix();
}
